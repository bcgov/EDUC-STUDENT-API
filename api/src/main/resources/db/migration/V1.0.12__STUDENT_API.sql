--Create student history activity code table
CREATE TABLE STUDENT_HISTORY_ACTIVITY_CODE (
  HISTORY_ACTIVITY_CODE VARCHAR2(10) NOT NULL,
  LABEL VARCHAR2(30),
  DESCRIPTION VARCHAR2(255),
  DISPLAY_ORDER NUMBER DEFAULT 1 NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_HISTORY_ACTIVITY_CODE_PK PRIMARY KEY (HISTORY_ACTIVITY_CODE)
);
COMMENT ON TABLE STUDENT_HISTORY_ACTIVITY_CODE IS 'Student history activity code lists the standard codes indicating which activity triggered the creation of a history record.';

-- Student merge source codes
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('REQMATCH','Req Match','Record updated by PEN Request Match',1,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('REQNEW','Req New','Record created by PEN Request New PEN',2,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('REQUNMATCH','Req Unmatch','Record unlinked to a PEN Request',3,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('MERGE','Merge','Record was merged',4,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('DEMERGE','Demerge','Record was demerged',5,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('SLD','SLD Update','Record updated by SLD processing',6,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('USEREDIT','User Edit','User edited record',7,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('USERNEW','User Create','User manually created new record',8,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('SPLITNEW','Split New','Record was split',9,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('REVERT','Revert','Record was reverted from an earlier History record',10,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('PEN','VMS PEN','Change via PEN Request New PEN',11,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('VMS','VMS Unknown','Change in VMS by unknown system or activity',12,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));
INSERT INTO STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
       VALUES ('XTR','VMS XTR','Change via VMS XTR',13,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-11-04','YYYY-MM-DD'));


--Create student history table
CREATE TABLE STUDENT_HISTORY
(
    STUDENT_HISTORY_ID              RAW(16)              NOT NULL,
    STUDENT_ID                      RAW(16)              NOT NULL,
    HISTORY_ACTIVITY_CODE           VARCHAR2(10)         NOT NULL,
    PEN                             VARCHAR2(9)          NOT NULL,
    LEGAL_FIRST_NAME                VARCHAR2(255),
    LEGAL_MIDDLE_NAMES              VARCHAR2(255),
    LEGAL_LAST_NAME                 VARCHAR2(255)        NOT NULL,
    DOB                             DATE                 NOT NULL,
    SEX_CODE                        VARCHAR2(1),
    GENDER_CODE                     VARCHAR2(1),
    USUAL_FIRST_NAME                VARCHAR2(255),
    USUAL_MIDDLE_NAMES              VARCHAR2(255),
    USUAL_LAST_NAME                 VARCHAR2(255),
    EMAIL                           VARCHAR2(255),
    POSTAL_CODE                     VARCHAR2(6),
    EMAIL_VERIFIED                  VARCHAR2(1)          NOT NULL,
    DECEASED_DATE                   DATE,
    MINCODE                         VARCHAR2(8),
    LOCAL_ID                        VARCHAR2(12),
    GRADE_CODE                      VARCHAR2(2),
    MEMO                            VARCHAR2(25),
    GRADE_YEAR                      VARCHAR2(4),
    DEMOG_CODE                      VARCHAR2(1),
    STATUS_CODE                     VARCHAR2(1),
    CREATE_USER                     VARCHAR2(32)         NOT NULL,
    CREATE_DATE                     DATE DEFAULT SYSDATE NOT NULL,
    UPDATE_USER                     VARCHAR2(32)         NOT NULL,
    UPDATE_DATE                     DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT STUDENT_HISTORY_PK PRIMARY KEY (STUDENT_HISTORY_ID)
);
COMMENT ON TABLE STUDENT_HISTORY IS 'Records the history of changes to Student data and the events that triggered the changes. ';
-- Column Comments
COMMENT ON COLUMN STUDENT_HISTORY.STUDENT_HISTORY_ID IS 'Unique surrogate key for each Student History record. GUID value must be provided during insert.';
COMMENT ON COLUMN STUDENT_HISTORY.STUDENT_ID IS 'Foreign key to the Student record that this history record tracks.';
COMMENT ON COLUMN STUDENT_HISTORY.HISTORY_ACTIVITY_CODE IS 'Code indicating which activity triggered the creation of this history record.';
COMMENT ON COLUMN STUDENT_HISTORY.PEN IS 'Provincial Education Number assigned by system to this student, in SIN format; used to track a student all through their educational career.Â ';
COMMENT ON COLUMN STUDENT_HISTORY.LEGAL_FIRST_NAME IS 'The legal first name of the student';
COMMENT ON COLUMN STUDENT_HISTORY.LEGAL_MIDDLE_NAMES IS 'The legal middle names of the student';
COMMENT ON COLUMN STUDENT_HISTORY.LEGAL_LAST_NAME IS 'The legal last name of the student';
COMMENT ON COLUMN STUDENT_HISTORY.DOB IS 'The date of birth of the student';
COMMENT ON COLUMN STUDENT_HISTORY.SEX_CODE IS 'The sex of the student';
COMMENT ON COLUMN STUDENT_HISTORY.GENDER_CODE IS 'The gender of the student';
COMMENT ON COLUMN STUDENT_HISTORY.USUAL_FIRST_NAME IS 'The usual/preferred first name of the student';
COMMENT ON COLUMN STUDENT_HISTORY.USUAL_MIDDLE_NAMES IS 'The usual/preferred middle name of the student';
COMMENT ON COLUMN STUDENT_HISTORY.USUAL_LAST_NAME IS 'The usual/preferred last name of the student';
COMMENT ON COLUMN STUDENT_HISTORY.USUAL_LAST_NAME IS 'The usual/preferred last name of the student';
COMMENT ON COLUMN STUDENT_HISTORY.EMAIL IS 'The email address of the student';
COMMENT ON COLUMN STUDENT_HISTORY.POSTAL_CODE IS 'The postal code for the student.';
COMMENT ON COLUMN STUDENT_HISTORY.EMAIL_VERIFIED IS 'Email verified flag';
COMMENT ON COLUMN STUDENT_HISTORY.DECEASED_DATE IS 'The date of death for the student. Will be known to EDUC only if student was an active student at the time.';
COMMENT ON COLUMN STUDENT_HISTORY.MINCODE IS 'The standard ministry code for the school the student last attended or that last claimed the student.';
COMMENT ON COLUMN STUDENT_HISTORY.LOCAL_ID IS 'The local identifier for the student. Usually the student number.';
COMMENT ON COLUMN STUDENT_HISTORY.GRADE_CODE IS 'Code identifying the student''s grade level.';
COMMENT ON COLUMN STUDENT_HISTORY.MEMO IS 'An internal memo field used by staff to record special notes about student records.';
COMMENT ON COLUMN STUDENT_HISTORY.GRADE_YEAR IS 'Year the student is in for the GRADE field.';
COMMENT ON COLUMN STUDENT_HISTORY.DEMOG_CODE IS 'Student demographic code (Accepted, Confirmed, Frozen).';
COMMENT ON COLUMN STUDENT_HISTORY.STATUS_CODE IS 'Status of the student.';

--Constraints
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_ID_FK FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID);
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_STATUS_CODE_FK FOREIGN KEY (STATUS_CODE) REFERENCES STUDENT_STATUS_CODE (STATUS_CODE);
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_DEMOG_CODE_FK FOREIGN KEY (DEMOG_CODE) REFERENCES STUDENT_DEMOG_CODE (DEMOG_CODE);
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_GENDER_CODE_FK FOREIGN KEY (GENDER_CODE) REFERENCES STUDENT_GENDER_CODE (GENDER_CODE);
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_SEX_CODE_FK FOREIGN KEY (SEX_CODE) REFERENCES STUDENT_SEX_CODE (SEX_CODE);
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_GRADE_CODE_FK FOREIGN KEY (GRADE_CODE) REFERENCES STUDENT_GRADE_CODE (GRADE_CODE);
ALTER TABLE STUDENT_HISTORY ADD CONSTRAINT STUDENT_HISTORY_STUDENT_HISTORY_ACTIVITY_CODE_FK FOREIGN KEY (HISTORY_ACTIVITY_CODE) REFERENCES STUDENT_HISTORY_ACTIVITY_CODE (HISTORY_ACTIVITY_CODE);



--Create student merge direction code table
CREATE TABLE STUDENT_MERGE_DIRECTION_CODE (
  MERGE_DIRECTION_CODE VARCHAR2(10) NOT NULL,
  LABEL VARCHAR2(30),
  DESCRIPTION VARCHAR2(255),
  DISPLAY_ORDER NUMBER DEFAULT 1 NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_MERGE_DIRECTION_CODE PRIMARY KEY (MERGE_DIRECTION_CODE)
);
COMMENT ON TABLE STUDENT_MERGE_DIRECTION_CODE IS 'Student merge direction code lists the standard codes for the direction of merge operation.';

-- Student merge direction codes
INSERT INTO STUDENT_MERGE_DIRECTION_CODE (MERGE_DIRECTION_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('FROM','Merged from','The Student record was merged to the other record. This Student record is deprecated as a result of a merge.',1,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_MERGE_DIRECTION_CODE (MERGE_DIRECTION_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('TO','Merged to','The Student record was the target of, or survivor of the merge. Also referred to as the True PEN.',2,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));


--Create student merge table
CREATE TABLE STUDENT_MERGE (
  STUDENT_MERGE_ID RAW(16) NOT NULL,
  STUDENT_ID RAW(16) NOT NULL,
  MERGE_STUDENT_ID RAW(16) NOT NULL,
  STUDENT_MERGE_DIRECTION_CODE VARCHAR2(10) NOT NULL,
  STUDENT_MERGE_SOURCE_CODE VARCHAR2(10) NOT NULL,
  CREATE_USER  VARCHAR2(32) NOT NULL,
  CREATE_DATE  DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER  VARCHAR2(32) NOT NULL,
  UPDATE_DATE  DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_MERGE_PK PRIMARY KEY (STUDENT_MERGE_ID)
);
COMMENT ON TABLE STUDENT_MERGE IS 'Contains the IDs of Student records that were merged together, and distinguishes the MergedTo record (known as the True PEN) and the MergedFrom record. These result from merge actions taken by users.';
-- Column Comments
COMMENT ON COLUMN STUDENT_MERGE.STUDENT_MERGE_ID IS 'Unique surrogate key for each record. GUID value must be provided during insert.';
COMMENT ON COLUMN STUDENT_MERGE.STUDENT_ID IS 'Foreign key to the Student record that has this merge record.';
COMMENT ON COLUMN STUDENT_MERGE.MERGE_STUDENT_ID IS 'Foreign key to the Student record that was the target of, or survivor of the merge when the merge direction was "to". Also referred to as the True PEN. The Student record was merged to the other record when the merge direction was "from". This Student record is deprecated as a result of a merge.';
COMMENT ON COLUMN STUDENT_MERGE.STUDENT_MERGE_DIRECTION_CODE IS 'Code specify the direction of the merge operation.';
COMMENT ON COLUMN STUDENT_MERGE.STUDENT_MERGE_SOURCE_CODE IS 'Code specify the source of the information that resulted in two Student records being merged as duplicates.';

ALTER TABLE STUDENT_MERGE
    ADD CONSTRAINT STUDENT_MERGE_STUDENT_ID_FK FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID);

ALTER TABLE STUDENT_MERGE
    ADD CONSTRAINT MERGE_STUDENT_ID_FK FOREIGN KEY (MERGE_STUDENT_ID) REFERENCES STUDENT (STUDENT_ID);

ALTER TABLE STUDENT_MERGE
    ADD CONSTRAINT STUDENT_MERGE_DIRECTION_CODE_FK FOREIGN KEY (STUDENT_MERGE_DIRECTION_CODE) REFERENCES STUDENT_MERGE_DIRECTION_CODE (MERGE_DIRECTION_CODE);

ALTER TABLE STUDENT_MERGE
    ADD CONSTRAINT STUDENT_MERGE_SOURCE_CODE_FK FOREIGN KEY (STUDENT_MERGE_SOURCE_CODE) REFERENCES STUDENT_MERGE_SOURCE_CODE (MERGE_SOURCE_CODE);

ALTER TABLE STUDENT_MERGE
    ADD CONSTRAINT STUDENT_ID_MERGE_STUDENT_ID_UK UNIQUE (STUDENT_ID, MERGE_STUDENT_ID);


--Create student twin reason code table
CREATE TABLE STUDENT_TWIN_REASON_CODE (
  TWIN_REASON_CODE VARCHAR2(10) NOT NULL,
  LABEL VARCHAR2(30),
  DESCRIPTION VARCHAR2(255),
  DISPLAY_ORDER NUMBER DEFAULT 1 NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_TWIN_REASON_CODE_PK PRIMARY KEY (TWIN_REASON_CODE)
);
COMMENT ON TABLE STUDENT_TWIN_REASON_CODE IS 'Student twinned reason code lists the standard codes for the reason why the two student records were marked as twins.';

-- Student grade codes
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('PENMATCH','Twinned by Matching PEN','A PEN Request was matched to an existing Student record, so that Student record was twinned with the other other possible matches found by the PEN Match algorithm',1,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('PENCREATE','Twinned by Creating PEN','A PEN Request filled by creating a new Student record, so that new Student was twinned with the other other possible matches found by the PEN Match algorithm',2,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('DEMERGE','Twinned after Demerge','Two previously merged Student records were demerged and twinned',3,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('SPLIT','Twinned after Split','One Student record was split into two and the two were twinned',4,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('AU','Legacy AU twinned by system','Legacy AU code, meaning twinned by system, likely while completing a PEN Request',5,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('SR','Slow Duplicate Report','Slow Duplicate Report',6,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('DR','PEN Master Duplicate Report','PEN Master Duplicate Report',7,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('MI','Ministry Identified','Ministry Identified',8,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('SC','School Identified','School Identified',9,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('DM','Twinned during de-merge','Twinned during de-merge',10,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('IF','Iffy Twin','Iffy Twin',11,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('FR','Fast Duplicate Report','Fast Duplicate Report',12,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('TX','Trax Identified','Trax Identified',13,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('SD','SLD Duplicate Report','SLD Duplicate Report',14,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('VT','Verified Twin','Verified Twin',15,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));
INSERT INTO STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE,LABEL,DESCRIPTION,DISPLAY_ORDER,EFFECTIVE_DATE,EXPIRY_DATE,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE) 
       VALUES ('DE','De-merged','De-merged',16,to_date('2020-01-01','YYYY-MM-DD'),to_date('2099-12-31','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2020-08-14','YYYY-MM-DD'),'IDIR/MINYANG',to_date('2019-08-14','YYYY-MM-DD'));


--Create student twin table
CREATE TABLE STUDENT_TWIN (
  STUDENT_TWIN_ID RAW(16) NOT NULL,
  STUDENT_ID RAW(16) NOT NULL,
  TWIN_STUDENT_ID RAW(16) NOT NULL,
  STUDENT_TWIN_REASON_CODE VARCHAR2(10) NOT NULL,
  CREATE_USER  VARCHAR2(32) NOT NULL,
  CREATE_DATE  DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER  VARCHAR2(32) NOT NULL,
  UPDATE_DATE  DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_TWIN_PK PRIMARY KEY (STUDENT_TWIN_ID)
);
COMMENT ON TABLE STUDENT_TWIN IS 'Contains the IDs of Student records that were twinned together, which means that, although the records have some similarity, they are believed to be different Students. The relationship is symmetric. Twinning occurs as a result of users manually completing PEN Requests.';
-- Column Comments
COMMENT ON COLUMN STUDENT_TWIN.STUDENT_TWIN_ID IS 'Unique surrogate key for each record. GUID value must be provided during insert.';
COMMENT ON COLUMN STUDENT_TWIN.STUDENT_ID IS 'Foreign key to the Student record that has this twin record.';
COMMENT ON COLUMN STUDENT_TWIN.TWIN_STUDENT_ID IS 'Foreign key to the Student record that was selected or created during PEN Request manual processing. It could be also found by the PEN Match system algorithm to be a possible match for the PEN Request.';
COMMENT ON COLUMN STUDENT_TWIN.STUDENT_TWIN_REASON_CODE IS 'Code specifying the reason why the two student records were marked as twins.';

ALTER TABLE STUDENT_TWIN
    ADD CONSTRAINT STUDENT_TWIN_STUDENT_ID_FK FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID);

ALTER TABLE STUDENT_TWIN
    ADD CONSTRAINT TWIN_STUDENT_ID_FK FOREIGN KEY (TWIN_STUDENT_ID) REFERENCES STUDENT (STUDENT_ID);

ALTER TABLE STUDENT_TWIN
    ADD CONSTRAINT STUDENT_TWIN_REASON_CODE_FK FOREIGN KEY (STUDENT_TWIN_REASON_CODE) REFERENCES STUDENT_TWIN_REASON_CODE (TWIN_REASON_CODE);

ALTER TABLE STUDENT_TWIN
    ADD CONSTRAINT STUDENT_ID_TWIN_STUDENT_ID_UK UNIQUE (STUDENT_ID, TWIN_STUDENT_ID);